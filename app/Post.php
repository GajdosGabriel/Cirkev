<?php

namespace App;


use App\Notifications\PostNewCreate;
use App\Presenters\PostPresenter;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Notifications\Notifiable;

/**
 * App\Post
 *
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Comment[] $comments
 * @property-read bool|string $datetime
 * @property-read mixed $format_date
 * @property-read mixed $is_subscribed_to
 * @property-read mixed|string $richtext
 * @property-read string $teaser
 * @property-read \App\Group $group
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Image[] $images
 * @property-read \Illuminate\Notifications\DatabaseNotificationCollection|\Illuminate\Notifications\DatabaseNotification[] $notifications
 * @property-write mixed $body
 * @property-write mixed $title
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\PostSubscription[] $subscriptions
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Tag[] $tags
 * @property-read \App\User $user
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Post filter($filters)
 * @method static bool|null forceDelete()
 * @method static \Illuminate\Database\Query\Builder|\App\Post onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Post reportComments()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Query\Builder|\App\Post withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\Post withoutTrashed()
 * @mixin \Eloquent
 */
class Post extends Model
{
    use Notifiable, SoftDeletes, PostPresenter;

    protected $fillable = [ 'title', 'body', 'slug', 'picture', 'group_id', 'video_link', 'user_id', 'published' ];
    protected $appends = ['IsSubscribedTo', 'images'];
    protected $dates = ['deleted_at'];

    static protected function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function($post){
           $post->user->notify(new PostNewCreate($post));
        });

    }




    public function user()
    {
        return $this->belongsTo('App\User');
    }


    public function group()
    {
        return $this->belongsTo('App\Group');
    }


    public function tags()
    {
        return $this->belongsToMany(Tag::class);
    }

    public function comments() {
        return $this->hasMany(Comment::class);
    }


    public function images() {
        return $this->hasMany(Image::class);
    }

    public function scopeReportComments($query) {
//    Send report all users each week
        return $query->whereHas('comments', function($query) {
            $query->where('created_at', '>=', Carbon::now()->subWeek());
        });
//        subDays(29)  subDays(10)
    }



//   Start Uniqua slug  --------------------------------------
    public function setTitleAttribute($value)
    {
        $this->attributes['title'] = ucfirst($value);
        $this->attributes['slug']  = str_slug($value);
    }

    /**
     * @return bool|string
     */
    public function getDatetimeAttribute()
    {
        return date('Y-m-d', strtotime($this->created_at));
    }


    public function getFormatDateAttribute()
    {
        return localized_date('j. M Y', $this->created_at);
    }


    public function setBodyAttribute($value)
    {
        $this->attributes['body'] = cleanBody($value);

    }


    /**
     * @return string
     */
    public function getTeaserAttribute()
    {
        return htmlspecialchars_decode (word_limiter( $this->body, 60 ));
    }


    /**
     * @return mixed|string
     */
    public function getRichtextAttribute()
    {
        return  add_paragraphs( filter_url( e($this->body)) );
    }

    public function addComment($comment) {
        $comment = $this->comments()->create($comment);
        // Komentujúceho prihlási na odber
        $comment->post->subscribe($userId = $comment->user->id);


        $this->subscriptions->filter(function ($sub) use ($comment) {
            return $sub->user_id != $comment->user_id;
        })->each->notify($comment);

        return $comment;
    }


    public function subscribe($userId = null) {
        if( ! $this->subscriptions()->where('user_id', $userId ?: auth()->id() )->exists()) {
            return $this->subscriptions()->create(['user_id' => $userId ?: auth()->id()]);
        }
    }

    public function unsubscribe($userId = null) {
        return $this->subscriptions()->where('user_id', $userId ?: auth()->id())->delete();
    }

    public function subscriptions() {
        return $this->hasMany(PostSubscription::class);
    }

    public function getIsSubscribedToAttribute() {
        return $this->subscriptions()->where('user_id', auth()->id())->exists();
    }



    public function postUpdate ($items) {

        if(request('picture') AND ! empty($this->picture) ) {
            rmDirectory(storage_path('app/public/posts/' . $this->id));
        }
        $this->update($items);

    }

    public function scopeFilter($query, $filters)
    {
        return $filters->apply($query);
    }




}



